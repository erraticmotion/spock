// <copyright file="WithdrawFixedAmounts.cs" company="Erratic Motion Ltd">
// Copyright (c) Erratic Motion Ltd. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>

//----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
//----------------------------------------------------------------------------

// spock -t:NUnit -n:ErraticMotion -f:WithdrawFixedAmounts.feature

namespace ErraticMotion {
using global::ErraticMotion.Test.Tools.Gherkin.Annotations;
using global::NUnit.Framework;
/// <summary>
/// <para>Feature Id: d2f12c96-a9e4-4fc6-8b6a-e94b025466e3</para>
/// <para>Withdraw Fixed Amounts</para>
/// <para></para>
/// </summary>
/// <remarks>
/// <example>
/// <code language="none" title="Gherkin">
/// #language: en
/// #source: C:\source\spock\spock\spock.cli.test\WithdrawFixedAmounts.feature
/// [Feature]: Withdraw Fixed Amounts
/// 
/// 
/// [Scenarios]: Withdraw fixed amount
///   [Given] I have &amp;lt;Balance&amp;gt; in my account
///   [When] I choose to withdraw a fixed amount of &amp;lt;Withdrawal&amp;gt;
///   [Then] I should &amp;lt;Outcome&amp;gt;
///     [And] the balance of my account should be &amp;lt;Remaining&amp;gt;
///     [Where]: Successful withdrawal
///     Can add an optional description in addition to the name for an Examples, Where keyword.
///           (Balance,Withdrawal,Outcome,Remaining)
///           (500D,50D,receive $50 cash,450D)
///           (500,100,receive $100 cash,400)
///     [Where]: Attempt to withdraw too much
///           (Balance,Withdrawal,Outcome,Remaining)
///           (100D,200D,see an error,100D)
///           (0,50,see an error,0)
/// 
/// 
/// </code>
/// </example>
/// </remarks>
[FeatureId("d2f12c96-a9e4-4fc6-8b6a-e94b025466e3")]
[Feature("")]
[GeneratedFromFeature]
[TestFixture]
[Category("Customer")]
public partial class WithdrawFixedAmounts
{
partial void WhereWithdrawFixedAmount(double Balance, double Withdrawal, string Outcome, double Remaining);
partial void GivenIHaveBalanceInMyAccount();
partial void WhenIChooseToWithdrawAFixedAmountOfWithdrawal();
partial void ThenIShouldOutcome();
partial void AndTheBalanceOfMyAccountShouldBeRemaining();

private void OnWithdrawFixedAmount(double Balance, double Withdrawal, string Outcome, double Remaining)
{
   WhereWithdrawFixedAmount(Balance, Withdrawal, Outcome, Remaining);
   GivenIHaveBalanceInMyAccount();
   WhenIChooseToWithdrawAFixedAmountOfWithdrawal();
   ThenIShouldOutcome();
   AndTheBalanceOfMyAccountShouldBeRemaining();
}

/// <summary>
/// <para>Scenario Id: a19a3728-4e5e-4362-8e23-b344d9ae6efe</para>
/// <para>Withdraw fixed amount</para>
/// <para></para>
/// </summary>
/// <remarks>
/// <example>
/// <code language="none" title="Gherkin">
/// [Scenarios]: Withdraw fixed amount
///   [Given] I have &amp;lt;Balance&amp;gt; in my account
///   [When] I choose to withdraw a fixed amount of &amp;lt;Withdrawal&amp;gt;
///   [Then] I should &amp;lt;Outcome&amp;gt;
///     [And] the balance of my account should be &amp;lt;Remaining&amp;gt;
///     [Where]: Successful withdrawal
///     Can add an optional description in addition to the name for an Examples, Where keyword.
///           (Balance,Withdrawal,Outcome,Remaining)
///           (500D,50D,receive $50 cash,450D)
///           (500,100,receive $100 cash,400)
///     [Where]: Attempt to withdraw too much
///           (Balance,Withdrawal,Outcome,Remaining)
///           (100D,200D,see an error,100D)
///           (0,50,see an error,0)
/// </code>
/// </example>
/// </remarks>
[ScenarioId("a19a3728-4e5e-4362-8e23-b344d9ae6efe")]
[System.CLSCompliant(false)]
[TestCase(500, 50, "receive $50 cash", 450)]
[TestCase(500, 100, "receive $100 cash", 400)]
[TestCase(100, 200, "see an error", 100)]
[TestCase(0, 50, "see an error", 0)]
public void WithdrawFixedAmount(double Balance, double Withdrawal, string Outcome, double Remaining)
{
   OnWithdrawFixedAmount(Balance, Withdrawal, Outcome, Remaining);
}
}
}
